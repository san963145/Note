1.  Function Program

    use function as data, such as arguments and return..
    
    Basic Types:
    Runnable  Callable  Fucntion  BiFunction Consumer..

2.  Lambda
  
    i->i*2
    
3.  Optinal
    
    private static Optional<ArrayList<ExchangeRate>> get(String from)
    {
    	return Optional.ofNullable(map.get(from));
	  }
	  
	  private static Optional<Integer> getMax(ArrayList<ExchangeRate> list)
	  {
    	Integer max=null;
    	for(int i=0;i<list.size();i++)
    	{
    		ExchangeRate r=list.get(i);
    		if(max==null)
    		{
    			max=(int) (r.getHigh()-r.getLow());
    		}
    		else if(r.getHigh()-r.getLow()>max)
    		{
    			max=(int) (r.getHigh()-r.getLow());
    		}
    	}
    	return Optional.ofNullable(max);
	 }
	  System.out.println(get("GBP").map(Test3::getMax).orElse(Optional.empty()).orElse(-1));

4.  Stream
    
    transform action
    
    transform:
    map(Function)
    filter(Predicate)
    
    action:
    collectors   terminal operations to consume the stream into a container
    foreach
    reduce
    
    list.stream().sorted((ExchangeRate a,ExchangeRate b)->(int)a.getOpen()-(int)b.getOpen())
    .collect(Collectors.toList()).forEach(x->System.out.println(x.getOpen()));
		
